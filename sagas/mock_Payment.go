// Code generated by mockery v2.13.1. DO NOT EDIT.

package sagas

import mock "github.com/stretchr/testify/mock"

// MockPayment is an autogenerated mock type for the Payment type
type MockPayment struct {
	mock.Mock
}

type MockPayment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayment) EXPECT() *MockPayment_Expecter {
	return &MockPayment_Expecter{mock: &_m.Mock}
}

// CancelPay provides a mock function with given fields: id
func (_m *MockPayment) CancelPay(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPayment_CancelPay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelPay'
type MockPayment_CancelPay_Call struct {
	*mock.Call
}

// CancelPay is a helper method to define mock.On call
//  - id int
func (_e *MockPayment_Expecter) CancelPay(id interface{}) *MockPayment_CancelPay_Call {
	return &MockPayment_CancelPay_Call{Call: _e.mock.On("CancelPay", id)}
}

func (_c *MockPayment_CancelPay_Call) Run(run func(id int)) *MockPayment_CancelPay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPayment_CancelPay_Call) Return(_a0 error) *MockPayment_CancelPay_Call {
	_c.Call.Return(_a0)
	return _c
}

// Pay provides a mock function with given fields: clientId, sum
func (_m *MockPayment) Pay(clientId int, sum int) (int, error) {
	ret := _m.Called(clientId, sum)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(clientId, sum)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(clientId, sum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayment_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type MockPayment_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//  - clientId int
//  - sum int
func (_e *MockPayment_Expecter) Pay(clientId interface{}, sum interface{}) *MockPayment_Pay_Call {
	return &MockPayment_Pay_Call{Call: _e.mock.On("Pay", clientId, sum)}
}

func (_c *MockPayment_Pay_Call) Run(run func(clientId int, sum int)) *MockPayment_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockPayment_Pay_Call) Return(_a0 int, _a1 error) *MockPayment_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockPayment interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPayment creates a new instance of MockPayment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPayment(t mockConstructorTestingTNewMockPayment) *MockPayment {
	mock := &MockPayment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
