// Code generated by mockery v2.13.1. DO NOT EDIT.

package sagas

import mock "github.com/stretchr/testify/mock"

// MockStock is an autogenerated mock type for the Stock type
type MockStock struct {
	mock.Mock
}

type MockStock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStock) EXPECT() *MockStock_Expecter {
	return &MockStock_Expecter{mock: &_m.Mock}
}

// CancelReserve provides a mock function with given fields: id
func (_m *MockStock) CancelReserve(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStock_CancelReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelReserve'
type MockStock_CancelReserve_Call struct {
	*mock.Call
}

// CancelReserve is a helper method to define mock.On call
//  - id int
func (_e *MockStock_Expecter) CancelReserve(id interface{}) *MockStock_CancelReserve_Call {
	return &MockStock_CancelReserve_Call{Call: _e.mock.On("CancelReserve", id)}
}

func (_c *MockStock_CancelReserve_Call) Run(run func(id int)) *MockStock_CancelReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockStock_CancelReserve_Call) Return(_a0 error) *MockStock_CancelReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

// Reserve provides a mock function with given fields: itemId, qty
func (_m *MockStock) Reserve(itemId int, qty int) (int, error) {
	ret := _m.Called(itemId, qty)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(itemId, qty)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(itemId, qty)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStock_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type MockStock_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
//  - itemId int
//  - qty int
func (_e *MockStock_Expecter) Reserve(itemId interface{}, qty interface{}) *MockStock_Reserve_Call {
	return &MockStock_Reserve_Call{Call: _e.mock.On("Reserve", itemId, qty)}
}

func (_c *MockStock_Reserve_Call) Run(run func(itemId int, qty int)) *MockStock_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockStock_Reserve_Call) Return(_a0 int, _a1 error) *MockStock_Reserve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockStock interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStock creates a new instance of MockStock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStock(t mockConstructorTestingTNewMockStock) *MockStock {
	mock := &MockStock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
